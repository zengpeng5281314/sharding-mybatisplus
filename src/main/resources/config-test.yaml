
dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://10.2.2.7:3306/db_0?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: 123456
  ds_1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://10.2.2.7:3306/db_1?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: 123456

  ds_2:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://10.2.2.7:3306/db_0?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: 123456
  ds_3:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://10.2.2.7:3307/db_0?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: 123456

rules:
  - !READWRITE_SPLITTING
    dataSources:
      readwrite_ds:
        staticStrategy:
          writeDataSourceName: ds_2
          readDataSourceNames:
            - ds_3
        loadBalancerName: random
    loadBalancers:
      random:
        type: RANDOM

  - !SHARDING
    tables:
      order_info:
        actualDataNodes: ds_${0..1}.t_order_info_${0..3}
        tableStrategy:
          standard:
            shardingColumn: user_id
            shardingAlgorithmName: t-order-inline
        keyGenerateStrategy:
          column: id
          keyGeneratorName: snowflake
#        auditStrategy:
#          auditorNames:
#            - sharding_key_required_auditor
#          allowHintDisable: true
#      t_order_item:
#        actualDataNodes: ds_${0..1}.t_order_item_${0..1}
#        tableStrategy:
#          standard:
#            shardingColumn: order_id
#            shardingAlgorithmName: t_order-item-inline
#        keyGenerateStrategy:
#          column: order_item_id
#          keyGeneratorName: snowflake
#      t_account:
#        actualDataNodes: ds_${0..1}.t_account_${0..1}
#        tableStrategy:
#          standard:
#            shardingAlgorithmName: t-account-inline
#        keyGenerateStrategy:
#          column: account_id
#          keyGeneratorName: snowflake
#    defaultShardingColumn: account_id
#    bindingTables:
#      - t_order,t_order_item
#    broadcastTables:
#      - t_address
    defaultDatabaseStrategy:
      standard:
        shardingColumn: org_id
        shardingAlgorithmName: database-inline
    defaultTableStrategy:
      none:

    shardingAlgorithms:
      database-inline:
        type: DB_HINT
        props:
          algorithmClassName: com.zengpeng.shardingmybatisplus.config.DBStandardShardingStrategy
#          algorithm-expression: ds_${org_id % 2}
      t-order-inline:
        type: TABLE_HINT
#        type: INLINE
        props:
          algorithmClassName: com.zengpeng.shardingmybatisplus.config.TableStandardShardingStrategy
#          algorithm-expression: t_order_info_${user_id % 4}
#      t_order-item-inline:
#        type: INLINE
#        props:
#          algorithm-expression: t_order_item_${order_id % 2}
#      t-account-inline:
#        type: INLINE
#        props:
#          algorithm-expression: t_account_${account_id % 2}
    keyGenerators:
      snowflake:
        type: SNOWFLAKE
#    auditors:
#      sharding_key_required_auditor:
#        type: DML_SHARDING_CONDITIONS

props:
  sql-show: true